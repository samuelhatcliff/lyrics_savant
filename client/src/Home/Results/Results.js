import React, { useState, useEffect } from 'react';
//Our Components
import Artist from "./Artist/Artist";
import Compare from "./Compare/Compare";
//Styling Components
import { Circles } from 'react-loader-spinner';
import './Results.css';

const Results = ({ artistId, artistId2, setLoading, isLoading, setIsLoaded, isLoaded }) => {
    const [artist, setArtist] = useState(null)
    const [artist2, setArtist2] = useState(null)
    const [wcRes, setWcRes] = useState(null)
    const [wc2Res, setWc2Res] = useState(null)
    const [artistSongs, setArtistSongs] = useState([])
    const [artistSongs2, setArtistSongs2] = useState([])

    //wordcloud promises are initialized outside of the useEffect block where they are defined 
    //so that we can include them in Promise.all()
    let wcPromise;
    let wcPromise2;
    useEffect(() => {
        console.log("WC USEEFFECT")
        //wordcloud is generated by python on the back-end, so a separate request is needed to retrieve it through
        //its own endpoint
        wcPromise = fetch(`/api/artists/${artistId}/wc`).then(
            res => res.json().then(
                initialData => {
                    const data = initialData['data']
                    setWcRes(data)
                }
            ))
        if (artistId2) {
            wcPromise2 = fetch(`/api/artists/${artistId2}/wc`).then(
                res => res.json().then(
                    initialData => {
                        const data = initialData['data']
                        setWc2Res(data)
                    }
                ))
        }
    }, [artistId, artistId2])

    console.log("RESULTS RE RENDER")
    useEffect(() => {
        console.log("ARTIST USEEFFECT")
        const artistPromise = fetch(`/api/artists/${artistId}`).then( // gets data for 1st artist
            res => res.json()
        ).then(
            initialData => {
                setArtist(initialData);
            }
        )
        const songsPromise = fetch(`/api/artists/${artistId}/songs`).then( // gets data for 1st artist
            res => res.json()
        ).then(
            initialData => {
                setArtistSongs(initialData['songs']);
            }
        )
        if (artistId2) {
            const artistPromise2 = fetch(`/api/artists/${artistId2}`).then( // gets data for 1st artist
                res => res.json()
            ).then(
                initialData => {
                    setArtist2(initialData);
                }
            )
            const songsPromise2 = fetch(`/api/artists/${artistId2}/songs`).then( // gets data for 1st artist
                res => res.json()
            ).then(
                initialData => {
                    setArtistSongs2(initialData['songs']);
                }
            )
            Promise.all([artistPromise, artistPromise2, songsPromise, songsPromise2, wcPromise, wcPromise2]).then(() => {
                setLoading(false)
                setIsLoaded(true)
            })
        } else {
            Promise.all([artistPromise, songsPromise, wcPromise]).then(() => {
                setLoading(false)
                setIsLoaded(true)
                setArtist2(null)
            }
            )
        }
    }, [artistId2, artistId, isLoading])//isLoading is included to address the edge case of a user clicking "Get Insights" a second time for the 
    //same exact artists

    return (
        < >
            <div>
                {!isLoaded && isLoading ? (<hr></hr>
                )
                    :
                    (<></>)}
            </div>
            {!isLoading ? (
                <div>
                    {!artist2 ? (
                        <div className="flex-container">
                            <Artist
                                artist={artist}
                                artistSongs={artistSongs}
                                wc={wcRes}
                                compare={false}
                            />
                        </div>
                    ) : (
                        <div className="results">
                            <div className="container">
                                <Artist artist={artist} artistSongs={artistSongs} compare={true} wc={wcRes} />
                                <Compare artist1={artist} artist2={artist2} />
                                <Artist artist={artist2} artistSongs={artistSongs2} compare={true} wc={wc2Res} />
                            </div>
                        </div>
                    )}
                </div>
            ) : (
                <div className="loading">
                    Loading...
                    <Circles color="#00BFFF" height={80} width={80} />
                </div>
            )
            }
        </>
    )
}


export default Results



